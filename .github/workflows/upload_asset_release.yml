on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch: # Permet le lancement manuel
    inputs:
      name:
        description: 'Nom de tag et release'
        required: true

name: Upload Release Asset

jobs:
  build:
    name: Upload Release Asset
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python 3.8.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.8.7
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller==3.6
          pip install -U -r requirements.txt
      - name: Build project # This would actually build your project, using zip for an example artifact
        id: build
        run: |
          pyinstaller --onefile --windowed --icon=./loop.ico main.py --exclude-module numpy --name appUtilitaire
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.name }}
          release_name: Release ${{ github.event.inputs.name }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./dist/appUtilitaire.exe
          asset_name: appUtilitaire.exe
          asset_content_type: application/exe
